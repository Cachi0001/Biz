SabiOps - Enhanced Implementation Guide for Full-Stack AI Engineer
Date: January 7, 2025
Purpose:This guide outlines the development of a production-ready, scalable Minimum Viable Product (MVP) for SabiOps—a business management tool tailored for Nigerian SMEs. It addresses critical pain points, enhances financial tracking, and fosters growth with intelligent features and an intuitive UI. The solution is deployed with the frontend at sabiops.vercel.app and backend at sabiops-backend.vercel.app, using Supabase (project name: "sabiops") as the database. This updated guide ensures all core functionalities are fully implemented, addressing current issues where only authentication is working.
Tech Stack:  

Backend: Flask (Python) with Supabase (PostgreSQL)  
Justification: Supabase provides a free tier, managed PostgreSQL, authentication, real-time capabilities, and scalability.


Frontend: React with Tailwind CSS  
Justification: Modern, responsive, and performant UI.


Authentication: JWT with Supabase  
Payments: Paystack  
Image Storage: Cloudinary  
Deployment: Vercel

Core Functionalities:  

User Management & Authentication  

Features:  
Owners can create team member accounts (Admins and Salespeople) using a single form with fields: full name, email, password, and a role dropdown (Admin or Salesperson). Creation requires owner authentication.  
Team members inherit the owner’s subscription plan and remaining trial period (e.g., if the owner has 6 days left, team members get 6 days).  
Email-based registration with mandatory verification.  
Secure login with password recovery via email or phone.  
Send warning emails via Gmail before deleting inactive accounts; auto-delete after 30 days (Supabase scheduled function).  
Role-based access: Only owners can create/deactivate team members and upgrade subscriptions.  
Optional referral code input during sign-up (e.g., "SABIXXXXXX").


Implementation:  
Backend: Use Flask with Supabase auth; validate email uniqueness; link team members to owners via owner_id for subscription inheritance; implement deactivation logic.  
Frontend: Update Register.jsx with an optional referral code field; create a team management page for owners with a single form (full name, email, password, role dropdown). Hide subscription details from Admin/Salesperson dashboards.  
Error Handling: Return clear messages (e.g., "Email already in use").




Customer Relationship Management (CRM)  

Features:  
Customer profiles (name, email, phone, address, purchase history, interactions).  
Segmentation by purchase behavior (e.g., frequent buyers).  
Manual client input for invoices.  
Edit/delete clients (Silver plan only).


Implementation:  
Backend: CRUD endpoints (/api/customers) with RLS ensuring access to owner’s data for team members.  
Frontend: Clients page with add/edit/delete forms; display purchase history in JSONB format.




Product/Inventory Management  

Features:  
Add/edit/delete products (name, description, price, stock, image via Cloudinary).  
Auto stock reduction on sales.  
Configurable low stock alerts (in-app toasts and push notifications).  
Role-based restocking: Owners and Admins can restock products.


Implementation:  
Backend: /api/products endpoints; trigger stock updates on sales; send notifications via Supabase real-time.  
Frontend: Stocks page with forms and alerts; enable restocking UI for Owners and Admins only.




Invoice Generation & Management  

Features:  
Create/send professional invoices (PDF export, email delivery).  
Status tracking (Draft, Sent, Paid, Overdue).  
Offline creation with sync when online.


Implementation:  
Backend: /api/invoices endpoints; generate PDFs with reportlab; store offline data in localStorage.  
Frontend: Invoice page with creation form; sync button for offline data.




Expense Tracking  

Features:  
Record/categorize expenses with receipt uploads (Cloudinary).  
Expense reports (monthly summaries).  
Offline entry with sync.


Implementation:  
Backend: /api/expenses endpoints; handle Cloudinary uploads.  
Frontend: Expenses page with form and report view; offline storage in localStorage.




Payment Processing  

Features:  
Paystack integration for payments.  
Auto-reconcile payments with invoices.


Implementation:  
Backend: Integrate Paystack SDK; update invoice status on payment success.  
Frontend: Pricing page with Paystack checkout (visible only to owners); display payment status.




Sales Reporting & Analytics  

Features:  
Daily sales reports (total, items sold, payment method breakdown).  
Downloadable as PDF/PNG.  
Analytics dashboard (revenue, expenses, profit).


Implementation:  
Backend: /api/reports/sales endpoint; aggregate data from transactions/sales tables.  
Frontend: Dashboard with charts (e.g., Chart.js) and download options; hide subscription metrics for Admins/Salespeople.




Referral System  

Features:  
10% commission on upgrades for monthly (₦500) and yearly (₦5,000) plans; weekly plans excluded.  
Real-time tracking dashboard.  
Withdrawal system (min ₦3,000 via Paystack).


Implementation:  
Backend: /api/referrals endpoints; calculate commissions based on plan type; integrate Paystack for withdrawals.  
Frontend: Referrals page with earnings table and withdrawal form.




Subscription Plans  

Features:  
Free: 5 invoices/expenses monthly, basic reporting.  
Silver Weekly (₦1,400), Monthly (₦4,500), Yearly (₦50,000) with advanced features.  
7-day free trial for weekly plan, inherited by team members based on owner’s remaining time; visual indicator (e.g., crown) on owner’s dashboard only.  
Pro-rata upgrades mid-cycle (owner-only feature).


Implementation:  
Backend: Track subscription status in users table; update all team members’ access on owner upgrade via owner_id.  
Frontend: Pricing page with upgrade options (owner-only); hide subscription details from Admin/Salesperson UI.




Offline Functionality  

Features:  
Offline invoice creation, expense entry, product updates, customer edits.  
Auto-sync with conflict resolution when online.


Implementation:  
Backend: Accept bulk sync data with timestamps for conflict resolution.  
Frontend: Use Service Workers and localStorage; show sync status indicators.




Transaction History  

Features:  
"Money In" (sales) and "Money Out" (expenses) view.  
Role-based access: Owners see all, Admins see operational data, Salespeople see sales only.  
Filter by date, category, payment method.


Implementation:  
Backend: /api/transactions endpoint with RLS filtering.  
Frontend: Transaction History page with filters and role-based UI.




Intelligent Upgrade Path  

Features:  
Suggest upgrades based on usage (e.g., nearing invoice limits) for owners only.  
In-app upgrade with prorated cost calculation.


Implementation:  
Backend: Monitor usage in /api/users/{id}; return upgrade prompts for owners.  
Frontend: Dashboard alerts with upgrade buttons (owner-only).





Architecture & Best Practices:  

Scalability: Use efficient queries; cache with Redis; process async tasks with Celery.  
Clean Architecture: Follow SOC, DDD, and modular design.  
Security: JWT auth, Bcrypt hashing, input validation, strict CORS, Supabase RLS, env variables.  
Testing: Unit (Jest, Pytest), integration, E2E tests.  
Performance: Lazy loading, code splitting, image optimization.  
Error Handling: Clear, user-friendly errors (e.g., "Failed to save invoice: Network error"); log comprehensively.  
Consistency: Standardize JSON data formats (e.g., camelCase keys).

Database Schema (Supabase - PostgreSQL):  

See updated SQL queries file for full schema, including tables for users, team, customers, products, invoices, expenses, sales, referrals, transactions, notifications, and push_subscriptions, with RLS policies.

API Endpoints (Flask):  

Authentication: /api/auth/register, /api/auth/login, /api/auth/forgot-password  
Users: /api/users/{id} (GET, PUT)  
Customers: /api/customers (POST, GET), /api/customers/{id} (PUT, DELETE)  
Products: /api/products (POST, GET), /api/products/{id} (PUT, DELETE)  
Invoices: /api/invoices (POST, GET), /api/invoices/{id} (PUT, DELETE)  
Expenses: /api/expenses (POST, GET)  
Team: /api/team (POST), /api/team/{id} (PUT)  
Referrals: /api/referrals (POST, GET)  
Transactions: /api/transactions (GET), /api/reports/sales (GET)  
Security: JWT, RLS, Flask-Limiter (100 req/hour)

Frontend (React with Tailwind CSS):  

Pages:  
Landing: "Get Started" button  
Register: Phone required, email optional, referral code optional  
Login: Phone or email  
Dashboard: Metrics, actions, trial/upgrade status (owner-only), crown for owners on weekly plan  
Pricing: Subscription plans with Paystack (owner-only)  
Clients: Manage clients (Silver)  
Team: Manage Admins/Salespersons (owner-only)  
Stocks: Manage products/alerts  
Referrals: Earnings and withdrawals  
Transaction History: Filterable (role-based)


Components:  
Navbar: Dynamic login/logout, role-based options  
Dashboard: Lazy-loaded analytics, role-specific widgets, crown for owners only  
Stock Management: Forms, toast alerts  
Offline Mode: Sync status indicators


Styling: Nigerian-inspired (green/blue gradients), Naira formatting  
Role-Based UI: Owners see all features; Admins see operational data (no subscription info); Salespeople see sales-focused UI (no subscription info).

Implementation Steps:  

Environment Setup  
Clone repos: git clone [frontend-url] and git clone [backend-url]  
Install dependencies: npm install (frontend), pip install -r requirements.txt (backend)


Database  
Run updated SQL queries in Supabase.


Backend  
Implement endpoints with consistent data handling; test with Postman.


Frontend  
Build pages/components; ensure offline support and role-based rendering.


Testing  
Run unit, integration, and E2E tests; verify all functionalities.


Deployment  
Deploy via Vercel with CI/CD; monitor logs for errors.



Additional Notes:  

Push Notifications: Use Supabase real-time or Firebase for in-app toasts and push notifications (e.g., low stock alerts).  
Offline Sync: Store data in localStorage; sync with backend using timestamps for conflict resolution.  
Calculations: Ensure app handles pro-rata upgrades, referral commissions, stock updates.  
Consistency: Frontend sends JSON matching backend expectations (e.g., { "userId": "uuid", "amount": 5000 }).  
Error Messages: Display specific errors (e.g., "Invoice creation failed: Missing customer name").  
Team Management: Owners create/deactivate team members with a single form; team members inherit owner’s subscription and trial period.  
Subscription Inheritance: Team members’ access reflects owner’s plan; subscription UI hidden from their dashboards.

Disclaimer:Existing Code: Since much of the code exists, review and test each feature (e.g., referral commissions, stock restocking, account deactivation) to ensure they work as expected in production. Ensure frontend data matches backend data during communication.

Our target audience are Nigerian SME's so remember we are trying as much as possible to make this application make it feel like it was built for them