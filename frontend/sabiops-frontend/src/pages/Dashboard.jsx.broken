import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { getDashboardOverview, getRevenueChart } from '../services/api';

// Safe component imports with error boundaries
const SafeCard = ({ children, className = '', ...props }) => {
  try {
    // Try to import Card component dynamically
    const { Card } = require('@/components/ui/card');
    return <Card className={className} {...props}>{children}</Card>;
  } catch (error) {
    console.warn('[DASHBOARD] Card component not available, using fallback');
    return (
      <div className={`border rounded-lg p-4 ${className}`} {...props}>
        {children}
      </div>
    );
  }
};
  try {
    // Try to import Card component
    const { Card } = require('@/components/ui/card');
    return <Card className={className} {...props}>{children}</Card>;
  } catch (error) {
    console.warn('[DASHBOARD] Card component not available, using fallback');
    return (
      <div className={`border rounded-lg p-4 ${className}`} {...props}>
        {children}
      </div>
    );
  }
};

const SafeCardHeader = ({ children, className = '', ...props }) => {
  try {
    const { CardHeader } = require('@/components/ui/card');
    return <CardHeader className={className} {...props}>{children}</CardHeader>;
  } catch (error) {
    return <div className={`pb-2 ${className}`} {...props}>{children}</div>;
  }
};

const SafeCardContent = ({ children, className = '', ...props }) => {
  try {
    const { CardContent } = require('@/components/ui/card');
    return <CardContent className={className} {...props}>{children}</CardContent>;
  } catch (error) {
    return <div className={className} {...props}>{children}</div>;
  }
};

const SafeCardTitle = ({ children, className = '', ...props }) => {
  try {
    const { CardTitle } = require('@/components/ui/card');
    return <CardTitle className={className} {...props}>{children}</CardTitle>;
  } catch (error) {
    return <h3 className={`font-medium ${className}`} {...props}>{children}</h3>;
  }
};

const SafeButton = ({ children, asChild, className = '', ...props }) => {
  try {
    const { Button } = require('@/components/ui/button');
    if (asChild) {
      return <Button asChild className={className} {...props}>{children}</Button>;
    }
    return <Button className={className} {...props}>{children}</Button>;
  } catch (error) {
    if (asChild && React.isValidElement(children)) {
      return React.cloneElement(children, {
        className: `inline-flex items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground hover:bg-primary/90 ${className}`,
        ...props
      });
    }
    return (
      <button className={`inline-flex items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 ${className}`} {...props}>
        {children}
      </button>
    );
  }
};

// Safe icon imports
const SafeIcon = ({ name, className = 'h-4 w-4', ...props }) => {
  try {
    const icons = require('lucide-react');
    const IconComponent = icons[name];
    if (IconComponent) {
      return <IconComponent className={className} {...props} />;
    }
  } catch (error) {
    console.warn(`[DASHBOARD] Icon ${name} not available`);
  }
  return <div className={`${className} bg-gray-300 rounded`} {...props} />;
};

const DashboardHybrid = () => {
  const [mounted, setMounted] = useState(false);
  const [overview, setOverview] = useState({
    revenue: { total: 0, this_month: 0, outstanding: 0 },
    customers: { total: 0, new_this_month: 0 },
    products: { total: 0, low_stock: 0 },
    invoices: { overdue: 0 }
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Safe useAuth with error boundary
  let authData = null;
  try {
    authData = useAuth();
    console.log('[HYBRID DASHBOARD] Auth data:', authData);
  } catch (err) {
    console.error('[HYBRID DASHBOARD] useAuth error:', err);
    setError('Authentication error');
  }

  useEffect(() => {
    console.log('[HYBRID DASHBOARD] Component mounted');
    setMounted(true);

    const fetchData = async () => {
      try {
        console.log('[HYBRID DASHBOARD] Fetching dashboard data...');
        
        // Try to import and use API functions safely
        let getDashboardOverview = null;
        try {
          const api = require('../services/api');
          getDashboardOverview = api.getDashboardOverview;
        } catch (apiError) {
          console.warn('[HYBRID DASHBOARD] API service not available:', apiError);
        }

        if (getDashboardOverview) {
          try {
            console.log('[HYBRID DASHBOARD] Calling getDashboardOverview...');
            const data = await getDashboardOverview();
            console.log('[HYBRID DASHBOARD] Raw data received:', data);
            console.log('[HYBRID DASHBOARD] Data type:', typeof data);
            console.log('[HYBRID DASHBOARD] Data keys:', data ? Object.keys(data) : 'No keys');
            
            if (data) {
              console.log('[HYBRID DASHBOARD] Processing data structure...');
              console.log('[HYBRID DASHBOARD] data.revenue:', data.revenue);
              console.log('[HYBRID DASHBOARD] data.customers:', data.customers);
              console.log('[HYBRID DASHBOARD] data.products:', data.products);
              console.log('[HYBRID DASHBOARD] data.invoices:', data.invoices);
              
              const processedOverview = {
                revenue: {
                  total: data.revenue?.total || 0,
                  this_month: data.revenue?.this_month || 0,
                  outstanding: data.revenue?.outstanding || 0
                },
                customers: {
                  total: data.customers?.total || 0,
                  new_this_month: data.customers?.new_this_month || 0
                },
                products: {
                  total: data.products?.total || 0,
                  low_stock: data.products?.low_stock || 0
                },
                invoices: {
                  overdue: data.invoices?.overdue || 0
                }
              };
              
              console.log('[HYBRID DASHBOARD] Processed overview:', processedOverview);
              setOverview(processedOverview);
            } else {
              console.warn('[HYBRID DASHBOARD] No data received from API');
            }
          } catch (fetchError) {
            console.error('[HYBRID DASHBOARD] Data fetch failed:', fetchError);
            console.error('[HYBRID DASHBOARD] Error details:', {
              message: fetchError.message,
              stack: fetchError.stack,
              response: fetchError.response
            });
            // Keep default values
          }
        } else {
          console.warn('[HYBRID DASHBOARD] getDashboardOverview function not available');
        }
      } catch (error) {
        console.error('[HYBRID DASHBOARD] General error:', error);
      } finally {
        setLoading(false);
      }
    };

    if (authData?.user) {
      fetchData();
    } else {
      setLoading(false);
    }
  }, [authData]);

  const formatCurrency = (amount) => {
    try {
      return new Intl.NumberFormat('en-NG', {
        style: 'currency',
        currency: 'NGN',
        minimumFractionDigits: 0,
      }).format(amount || 0);
    } catch (error) {
      return `â‚¦${(amount || 0).toLocaleString()}`;
    }
  };

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center p-6 border border-red-200 bg-red-50 rounded-lg">
          <h1 className="text-xl font-bold text-red-800">Dashboard Error</h1>
          <p className="text-red-600 mt-2">Error: {error}</p>
          <button 
            onClick={() => window.location.reload()}
            className="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
            Reload
          </button>
        </div>
      </div>
    );
  }

  if (!mounted || !authData) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-2">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  if (authData.loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-2">Authenticating...</p>
        </div>
      </div>
    );
  }

  if (!authData.isAuthenticated) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center p-6 border border-yellow-200 bg-yellow-50 rounded-lg">
          <h1 className="text-xl font-bold text-yellow-800">Not Authenticated</h1>
          <p className="text-yellow-600 mt-2">Please log in to access the dashboard</p>
        </div>
      </div>
    );
  }

  const user = authData.user || {};
  const userName = user.full_name || user.name || 'User';

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-2">Loading dashboard data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            Welcome back, {userName}!
          </h1>
          <p className="text-gray-600">
            Here's what's happening with your business today.
          </p>
          
          {/* Free Trial Warning */}
          {authData.isFreeTrial && authData.trialDaysLeft <= 3 && (
            <div className="flex items-center gap-2 mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded-md">
              <SafeIcon name="AlertTriangle" className="h-4 w-4 text-yellow-600" />
              <span className="text-sm text-yellow-800">
                Your free trial expires in {authData.trialDaysLeft} day{authData.trialDaysLeft !== 1 ? 's' : ''}. 
                <Link to="/subscription/upgrade" className="ml-1 underline font-medium">
                  Upgrade now
                </Link>
              </span>
            </div>
          )}
        </div>
        
        <div className="flex space-x-2">
          <SafeButton asChild>
            <Link to="/invoices/new">
              <SafeIcon name="Plus" className="mr-2 h-4 w-4" />
              New Invoice
            </Link>
          </SafeButton>
          
          {authData.isFreeTrial && (
            <SafeButton asChild variant="outline">
              <Link to="/subscription/upgrade">
                <SafeIcon name="Crown" className="mr-2 h-4 w-4" />
                Upgrade
              </Link>
            </SafeButton>
          )}
        </div>
      </div>

      {/* Overview Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <SafeCard>
          <SafeCardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <SafeCardTitle className="text-sm font-medium">Total Revenue</SafeCardTitle>
            <SafeIcon name="DollarSign" className="h-4 w-4 text-gray-500" />
          </SafeCardHeader>
          <SafeCardContent>
            <div className="text-2xl font-bold">
              {formatCurrency(overview?.revenue?.total || 0)}
            </div>
            <p className="text-xs text-gray-500">
              {formatCurrency(overview?.revenue?.this_month || 0)} this month
            </p>
          </SafeCardContent>
        </SafeCard>

        <SafeCard>
          <SafeCardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <SafeCardTitle className="text-sm font-medium">
              Customers
              {authData.isFreeTrial && (
                <span className="text-xs text-gray-500 ml-1">
                  ({overview?.customers?.total || 0}/10)
                </span>
              )}
            </SafeCardTitle>
            <SafeIcon name="Users" className="h-4 w-4 text-gray-500" />
          </SafeCardHeader>
          <SafeCardContent>
            <div className="text-2xl font-bold">
              {overview?.customers?.total || 0}
            </div>
            <p className="text-xs text-gray-500">
              +{overview?.customers?.new_this_month || 0} new this month
            </p>
          </SafeCardContent>
        </SafeCard>

        <SafeCard>
          <SafeCardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <SafeCardTitle className="text-sm font-medium">
              Products
              {authData.isFreeTrial && (
                <span className="text-xs text-gray-500 ml-1">
                  ({overview?.products?.total || 0}/50)
                </span>
              )}
            </SafeCardTitle>
            <SafeIcon name="Package" className="h-4 w-4 text-gray-500" />
          </SafeCardHeader>
          <SafeCardContent>
            <div className="text-2xl font-bold">
              {overview?.products?.total || 0}
            </div>
            <p className="text-xs text-gray-500">
              {overview?.products?.low_stock || 0} low stock
            </p>
          </SafeCardContent>
        </SafeCard>

        <SafeCard>
          <SafeCardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <SafeCardTitle className="text-sm font-medium">Overdue Invoices</SafeCardTitle>
            <SafeIcon name="FileText" className="h-4 w-4 text-gray-500" />
          </SafeCardHeader>
          <SafeCardContent>
            <div className="text-2xl font-bold">
              {overview?.invoices?.overdue || 0}
            </div>
            <p className="text-xs text-gray-500">
              Requires attention
            </p>
          </SafeCardContent>
        </SafeCard>
      </div>

      {/* Charts Section */}
      <div className="grid gap-6 md:grid-cols-2">
        {/* Revenue Chart */}
        <div className="p-4 border border-gray-200 rounded-lg bg-white">
          <h3 className="text-lg font-semibold mb-4">Revenue Trend</h3>
          <div className="h-48 flex items-center justify-center bg-gray-50 rounded border-2 border-dashed border-gray-300">
            <div className="text-center">
              <div className="text-gray-400 mb-2">ðŸ“ˆ</div>
              <p className="text-gray-500 text-sm">Revenue chart will be displayed here</p>
              <p className="text-xs text-gray-400 mt-1">
                Total: {formatCurrency(overview?.revenue?.total || 0)}
              </p>
            </div>
          </div>
        </div>

        {/* Customer Growth Chart */}
        <div className="p-4 border border-gray-200 rounded-lg bg-white">
          <h3 className="text-lg font-semibold mb-4">Customer Growth</h3>
          <div className="h-48 flex items-center justify-center bg-gray-50 rounded border-2 border-dashed border-gray-300">
            <div className="text-center">
              <div className="text-gray-400 mb-2">ðŸ‘¥</div>
              <p className="text-gray-500 text-sm">Customer growth chart will be displayed here</p>
              <p className="text-xs text-gray-400 mt-1">
                Total: {overview?.customers?.total || 0} customers
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Status Section */}
      <div className="mt-8 p-4 bg-green-50 border border-green-200 rounded-lg">
        <h3 className="font-semibold text-green-800">Dashboard Status</h3>
        <p className="text-green-700 text-sm mt-1">
          Hybrid dashboard loaded successfully with safe component loading and comprehensive error handling.
          This version uses fallback components when shadcn/ui components fail to load.
        </p>
        <div className="mt-2 text-xs text-green-600">
          <p>âœ… Authentication: Working</p>
          <p>âœ… Data fetching: {overview.revenue.total > 0 || overview.customers.total > 0 ? 'Working' : 'No data'}</p>
          <p>âœ… Component rendering: Working</p>
          <p>âœ… Error handling: Active</p>
        </div>
      </div>
    </div>
  );
};

export default DashboardHybrid;

